{"version":3,"sources":["angular-observe.js"],"names":["module","exports","window","angular","mod","service","self","this","property","target","prop","cb","value","Object","defineProperty","configurable","get","set","v","oldValue","properties","obj","_","isArray","length","unregisterSelf","unregisterChildren","paths","map","p","split","groupedPaths","mapValues","groupBy","filter","path","drop","forIn","newValue","undefined"],"mappings":"AACsB,mBAAXA,SAA6C,mBAAZC,UAA2BD,OAAOC,UAAYA,UACxFD,OAAOC,QAAU,oBAGnB,SAAUC,EAAQC,GAGhB,YAUA,IAAIC,GAAMD,EAAQH,OAAO,sBAezBI,GAAIC,QAAQ,WAAY,WAEtB,GAAIC,GAAOC,IAqBXD,GAAKE,SAAW,SAASC,EAAQC,EAAMC,GACrC,GAAIC,GAAQH,EAAOC,EAYnB,OAXAG,QAAOC,eAAeL,EAAQC,GAC5BK,cAAc,EACdC,IAAK,WACH,MAAOJ,IAETK,IAAK,SAASC,GACZ,GAAIC,GAAWP,CACfA,GAAQM,EACRP,EAAGC,EAAOO,MAGP,WACL,GAAIP,GAAQH,EAAOC,SACZD,GAAOC,GACdD,EAAOC,GAAQE,IAqBnBN,EAAKc,WAAa,SAASC,EAAKX,EAAMC,GAMpC,GALKW,EAAEC,QAAQb,KAEbA,GAAQA,IAGU,IAAhBA,EAAKc,OAAT,CAIA,GAgBIC,GAAgBC,EAhBhBC,EAAQL,EAAEM,IAAIlB,EAAM,SAASmB,GAC/B,MAASP,GAAEC,QAAQM,GAAqBA,EAAfA,EAAEC,MAAM,OAE/BC,EACFT,EAAEU,UACAV,EAAEW,QAAQN,EAAO,OACjB,SAASA,GACP,MAAOL,GAAEY,OACPZ,EAAEM,IAAID,EAAO,SAASQ,GACpB,MAAOb,GAAEc,KAAKD,EAAM,KAClB,SAASN,GACX,MAAOA,GAAEL,OAAS,KAiB5B,OAXAF,GAAEe,MAAMN,EAAc,SAASJ,EAAOjB,GACpCe,EAAiBnB,EAAKE,SAASa,EAAKX,EAAM,SAAS4B,EAAUnB,GAC3DR,IACAe,EAAqBpB,EAAKc,WAAWkB,EAAUX,EAAOhB,KAGtC4B,SAAdlB,EAAIX,KACNgB,EAAqBpB,EAAKc,WAAWC,EAAIX,GAAOiB,EAAOhB,MAIpD,WACsB4B,SAAvBb,GACFA,IAEFD,WAMLvB,OAAQA,OAAOC","file":"angular-observe.min.js","sourcesContent":["/* commonjs package manager support (eg componentjs) */\nif (typeof module !== \"undefined\" && typeof exports !== \"undefined\" && module.exports === exports) {\n  module.exports = 'tinydesk.observe';\n}\n\n(function(window, angular) {\n  /*jshint globalstrict:true*/\n  /*global angular:false*/\n  'use strict';\n\n  /**\n   * @ngdoc overview\n   * @name tinydesk.observe\n   *\n   * @description\n   *\n   *\n   */\n  var mod = angular.module('tinydesk.observe', []);\n\n  /**\n   * @ngdoc service\n   * @name tinydesk.observe.service:Observe\n   *\n   * @description\n   *\n   * A service that allows to watch changes on arbitrary javascript objects\n   *     similar to the $watch mechanism. It uses\n   * `Object.defineProperty` in the background and as a result does not put\n   *     more burden on angulars $digest cycles which can help in applications\n   *     that have a lot of watchers.\n   *\n   */\n  mod.service('Observe', [function() {\n\n    var self = this;\n\n    /**\n     * @ngdoc function\n     * @name property\n     * @methodOf tinydesk.observe.service:Observe\n     *\n     * @description\n     *\n     * Watches a single property on the target object and call the callback if\n     *     the value changes. This method behaves very similar to the standard\n     *     angular $watch. In particular, it is only triggered, if the property\n     *     value is replaced with a new reference or primitive value.\n     *\n     * @param {object} target An arbitrary javascript object.\n     * @param {string} prop The name of the property that should be observed.\n     *     Note that nested property references are not supported with this\n     *     method.\n     * @param {function} cb A callback method that is invoked, when the\n     *     property changes. It is provided with the new and the old value.\n     */\n    self.property = function(target, prop, cb) {\n      var value = target[prop];\n      Object.defineProperty(target, prop, {\n        configurable: true,\n        get: function() {\n          return value;\n        },\n        set: function(v) {\n          var oldValue = value;\n          value = v;\n          cb(value, oldValue);\n        }\n      });\n      return function unregister() {\n        var value = target[prop];\n        delete target[prop];\n        target[prop] = value;\n      };\n    };\n\n    /**\n     * @ngdoc function\n     * @name properties\n     * @methodOf tinydesk.observe.service:Observe\n     *\n     * @description\n     *\n     * Watches multiple, possibly nested, properties.\n     *\n     * @param {object} target An arbitrary javascript object.\n     * @param {Array} prop An array of property names. If a property name\n     *     includes one or more dot characters this is interpreted as a nested\n     *     path.\n     * @param {function} cb A callback method that is invoked, when the\n     *     property changes. Note that it is not provided with a parameter at\n     *     this point.\n     */\n    self.properties = function(obj, prop, cb) {\n      if (!_.isArray(prop)) {\n        // normalize:\n        prop = [prop];\n      }\n\n      if (prop.length === 0) {\n        return;\n      }\n\n      var paths = _.map(prop, function(p) {\n        return (!_.isArray(p)) ? p.split('.') : p;\n      });\n      var groupedPaths =\n        _.mapValues(\n          _.groupBy(paths, '[0]'),\n          function(paths) {\n            return _.filter(\n              _.map(paths, function(path) {\n                return _.drop(path, 1);\n              }), function(p) {\n                return p.length > 0\n              });\n          }\n        );\n\n      var unregisterSelf, unregisterChildren;\n      _.forIn(groupedPaths, function(paths, prop) {\n        unregisterSelf = self.property(obj, prop, function(newValue, oldValue) {\n          cb();\n          unregisterChildren = self.properties(newValue, paths, cb);\n        });\n\n        if (obj[prop] !== undefined) {\n          unregisterChildren = self.properties(obj[prop], paths, cb);\n        }\n      });\n\n      return function unregisterAll() {\n        if (unregisterChildren !== undefined) {\n          unregisterChildren();\n        }\n        unregisterSelf();\n      };\n    };\n\n  }]);\n\n})(window, window.angular);\n"],"sourceRoot":"/source/"}